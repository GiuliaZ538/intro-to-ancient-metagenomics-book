---
title: Introduction to Python and Pandas
author: Kevin Nota, Robin Warner, and Maxime Borry
---

Over the last few years, _Python_ has gained popularity thanks to the numerous libraries (packages with pre-written functions) in bioinformatics, statistical data analysis, and machine learning.
While a few years ago, it was often necessary to go to _R_ for performing routine data manipulation and analysis tasks, nowadays _Python_ has a vast ecosystem of useful libraries for working on metagenomic data.
Existing libraries exist for many different file formats encountered in metagenomics, such as fasta, fastq, sam, bam, etc.
Furthermore, python is fast and extremely useful for writing programs that can be easily called from the command line like many existing tools.

This tutorial/walkthrough will provide a short introduction to the 
popular libraries for data analysis [pandas](https://pandas.pydata.org/).
This library has functions for reading and manipulating _tabular data_ similar to the _`data.frame()`_ in _R_ together with some basic data plotting.
This will set the base for learning Python and use it for data analysis.

There are many IDEs in which Python code can be written.
For data analysis, Jupiter is powerful and popular which looks and functions similar to R markdown, where code is written in code blocks with space in text blocks for annotations.
In this tutorial/walkthrough, we will use these notebooks for running and visualizing Python code.

learning objectives:

- Get familiar with the Python code syntax and use Jupiter Notebook for executing codes.
- Get a kickstart to utilising the endless possibilities of data analysis in Python that can be applied to your data.

:::  {.callout-note} 
This session is typically ran held in parallel to the Introduction to R and Tidyverse. Participants of the summer schools chose which to attend based on their prior experience. We recommend the [introduction to R session](r-tidyverse.qmd) if you have no experience with neither R nor Python.
:::

::: {.callout-tip}
For this chapter's exercises, if not already performed, you will need to download the chapter's dataset, decompress the archive, and create and activate the conda environment.

Do this, use `wget` or right click and save to download this Zenodo archive: [10.5281/zenodo.8413046](https://doi.org/10.5281/zenodo.8413046), and unpack

```bash
tar xvf python-pandas.tar.gz 
cd python-pandas/
```

You can then create the subsequently activate environment with

```bash
conda env create -f python-pandas.yml
conda activate python-pandas
```
:::


## Working in a jupyter environment

This tutorial/walkthrough is using a [Jupyter Notebook](https://jupyter.org) for writing and executing Python code and for annotating.

Jupyter notebooks have two types of cells: **Markdown** and **Code**. 
The **Markdown cell** syntax is very similar to **R markdown**. 
The markdown cells are used for annotating code, which is important for sharing work with collaborators, reproducibility, and documentation.

Change the directory to the the working directory of this tutorial/walkthrough.

```{.bash eval=False}
cd /vol/volume/python-pandas/python-pandas_lecture
```

To launch jupyter, run the following command in the terminal. This will open a browser window with jupyter running. 

```{.bash eval=False}
jupyter notebook
```

Jupyter Notebook should have a file structure with all the files from the working directory. 
Open the `student-notebook.ipynb` notebook by clicking on it. 
This notebook has exactly the same code as written in this book chapter and is only a support so that it is not necessary to copy and paste the code. It is off course also possible to copy the code from this chapter into a fresh notebook file by clicking on:
 `File` > `New` > `Notebook`. 

::: {.callout-note collapse="true"}
## **Note If the notebook is not there**
If you cannot find `student-notebook.ipynb`, it is possible the working directory is not correct. Make sure that `pwd` returns `/vol/volume/python-pandas/python-pandas_lecture`.
:::

### Creating and running cells

There are multiple ways of making a new cells in jupyter, such as typing the letter `b`, or using the cursor on the bottom of the page that says _`click to add cell`_. 
The cells can be assigned to `code` or `markdown` using the drop down menu at the top.
Code cells are always in edit mode. 
Code can be run with pressing `Shift + Enter` or click on the `â–¶` botton.
To make an markdown cell active, double-click on a markdown cell, it switches from display mode to edit mode. 
To leave the editing mode by running the cell.

::: {.callout-tip collapse="true" title="**Clear your code cells**"}
Before starting it might be nice to clear the output of all code cells, by clicking on:

 `edit` > `Clear outputs of All Cells`
:::

### Markdown cell syntax

Here a few examples of the syntax for the Markdown cells are shown, such as making words __bold__, or _itelics_. For a more comprehensive list with syntax check out this [Jupyter Notebook cheat-sheet](https://www.ibm.com/docs/en/watson-studio-local/1.2.3?topic=notebooks-markdown-jupyter-cheatsheet).  

list of **markdown cell** examples:

- `**bold**` : **bold**
- `*italics*` : *italics*

Code

- \`inline code\` : `inline code`
 
 LaTeX maths

- `$ x = \frac{\pi}{42} $` : $$ x = \frac{\pi}{42} $$

url links

- `[link](https://www.python.org/)` : [link](https://www.python.org/)

Images

- `![](https://www.spaam-community.org/assets/media/SPAAM-Logo-Full-Colour_ShortName.svg)` ![](https://www.spaam-community.org/assets/media/SPAAM-Logo-Full-Colour_ShortName.svg)

::: {.callout-note collapse="true" title="**All roads lead to Rome**"}
In many cases, there are multiple syntaxes, or 'ways of doing things,' that will give the same results. For each section in this tutorial/walkthrough, one way is presented.
:::

### code cell syntax

The **code cells** can interpret many different coding languages including __Python__ and __Bash__. 
The syntax of the code cells is the same as the syntax of the coding languages, in our case __python__. 

Below are some examples of Python **code cells** with some useful basic python functions:

::: {.callout-tip collapse="true" title="**Python function print()**"}
`print()` is a python function for printing lines in the terminal

`print()` is the same as `echo` in bash
:::

```{.python eval=False}
print("Hello World from Python!")
```

::: {.callout-note collapse="true"}
## Expand see output
```
Hello World from Python!
```
:::
::: {.callout-tip collapse="true" title="**Running bash code in Jupyter**"}
It is also possible to run bash commands in Jupyter, by adding a *!* at the start of the line.

```{.python eval=False}
! echo "Hello World from bash!"
```
```
Hello World from bash!
```
:::


Stings or numbers can be stored as a variable by using the *=* sign.

```{.python eval=False}
i = 0
```
Ones a variable is set in one **code cell** they are stored and can be accessed in other downstream **code cells**.

To see what value a variable contains, the `print()` function can be used.

```{.python eval=False}
print(i)
```
::: {.callout-note collapse="true"}
## Expand see output
```
0
```
:::
You can also print multiple things together in one `print` statement such as a number and a string:

```{.python eval=True}
print("The number is", i, "Wow!")
```
::: {.callout-note collapse="true"}
## Expand see output
```
The number is, 0, Wow!
```
:::
## Pandas
### Getting started
Pandas is a Python library used for data manipulation and analysis.

We can import the library like this:

```{.python eval=False}
import pandas as pd
```

::: {.callout-tip collapse="true"}
## **Why import as pd?**
We set "pandas" to the alias "pd" because we are lazy and do not want to write the full word too many times.
:::

Now, we can print the current version:

```{.python eval=False}
pd.__version__
```
::: {.callout-note collapse="true"}
## Expand see output
'2.2.2'
:::
### Pandas data structures
The primary data structures in Pandas are `Series` and `DataFrame`.

A `DataFrame` is a table with **columns** and **rows**. 

Each **column** has a *column name* and each **row** has an *index*.

![](assets/images/chapters/python-pandas/01_table_dataframe.svg)

A single row or column (1 dimensional data) is a `Series`.

![](assets/images/chapters/python-pandas/01_table_series.svg)

::: {.callout-tip collapse="true" title="**More details on pandas**"}
For a more in detail pandas getting started tutorial [click here](https://pandas.pydata.org/docs/getting_started/index.html#)
:::

## Reading data with Pandas

Pandas can read in **csv** (comma separated values) files, which are tables in text format.

It is called **c**sv because each value is separated from the others through a comma.

```{text}
A,B
5,6
8,4
```

Another common tabular separator are **tsv**, where each value is separated by a **tab** `\t`.

```{text}
A\tB
5\t6
8\t4
```

The dataset that is used in this tutorial/walkthrough is called `"all_data.tsv"`, and is tab-separated. 
Pandas by default assume that the file is comma delimited, but this can be change by using the `sep= ` argument.

::: {.callout-tip collapse="true" title="**Pandas function pd.read_csv()**"}
`pd.read_csv()` is the pandas function to read in tabular tables. The `sep=` can be specified argument, `sep=,` is the default.
:::

```{.python eval=False}
df = pd.read_csv("../all_data.tsv", sep="\t")
df
```
::: {.callout-note collapse="true"}
## Expand see output
|ID|Year_Birth|Education|Marital_Status|Income|Kidhome|Teenhome|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|Complain|Z_CostContact|Z_Revenue
|-|----|----|----------|------|-------|-|-|--|--|---|---|--|--|-|--|-|-|-|-|--|
|0|5524|1957|Graduation|Single|58138.0|0|0|635|88|546|172|88|88|8|10|4|7|0|3|11|
|1|2174|1954|Graduation|Single|46344.0|1|1|11|1|6|2|1|6|1|1|2|5|0|3|11|
|2|4141|1965|Graduation|Together|71613.0|0|0|426|49|127|111|21|42|8|2|10|4|0|3|11|
|3|6182|1984|Graduation|Together|26646.0|1|0|11|4|20|10|3|5|2|0|4|6|0|3|11|
|4|7446|1967|Master|Together|62513.0|0|1|520|42|98|0|42|14|6|4|10|6|0|3|11|
|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|
|1749|9432|1977|Graduation|Together|666666.0|1|0|9|14|18|8|1|12|3|1|3|6|0|3|11|
|1750|8372|1974|Graduation|Married|34421.0|1|0|3|3|7|6|2|9|1|0|2|7|0|3|11|
|1751|10870|1967|Graduation|Married|61223.0|0|1|709|43|182|42|118|247|9|3|4|5|0|3|11|
|1752|7270|1981|Graduation|Divorced|56981.0|0|0|908|48|217|32|12|24|2|3|13|6|0|3|11|
|1753|8235|1956|Master|Together|69245.0|0|1|428|30|214|80|30|61|6|5|10|3|0|3|11|
1754 rows Ã— 20 columns
:::
::: {.callout-tip collapse="true"}
## **Help**
When you are unsure what arguments a function can take, it is possible to get a *help documentation* using `help(pd.read_csv)`
:::

In most cases, data will be read in with the `pd.read_csv()` function, however, internal Python data structures can also be transformed into a pandas data frame. 
For example using a nested list, were each row in the datafram is a list `[]`.

```{.python eval=False}
df = pd.Dataframe([[5,6], [8,4]], colums=["A", "B"])
df
```
::: {.callout-note collapse="true"}
## Expand see output

| |A|B|
|-|-|-|
|0|5|6|
|1|8|4|
:::

Another usful transformation is from a [dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries) to pd.Dataframe. 

```{.python eval=False}
table_data = {'A' : [5, 6]
              'B' : [8, 4]}

df = pd.DataFrame(data)
df
```
::: {.callout-note collapse="true"}
## Expand see output
| |A|B|
|-|-|-|
|0|5|6|
|1|8|4|

:::

There are many ways to turn a [`DataFrame` back into a dictonary](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict), which might be very handy for certain purposes.

## Data exploration

The data for this tutorial/walkthrough is from a customer personality analysis of a company trying to better understand how to modify their product catalogue. 
Here is the [link to the original source](https://www.kaggle.com/datasets/imakash3011/customer-personality-analysis) for more information. 

### Columns

To display all the column names from the imported `DataFrame`, the attribute `columns` can be called. 

```python{.python eval=False}
df.columns
```
::: {.callout-note collapse="true"}
## Expand see output
```
Index(['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome',
       'Teenhome', 'MntWines', 'MntFruits', 'MntMeatProducts',
       'MntFishProducts', 'MntSweetProducts', 'MntGoldProds',
       'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases',
       'NumWebVisitsMonth', 'Complain', 'Z_CostContact', 'Z_Revenue'],
      dtype='object')
```
:::

Each column has its own data types which are highly optimised. 
A column with only integers has the data type `int64`. 
Columns with decimal numbers are called `float64`. 
A column with only strings, or a combination of strings and `integers` or `floats` is called an `object`.

::: {.callout-tip collapse="true"}
## **What does 64 stand for?**
The 64 indicates the number of bits the integers are stored in.
64 bits is the largest pandas handels. 
When it is known that a value is in a certain range, it is possible to change the bits to 8, 16, or 32. 
This might reduce memory usage. 
:::
```{.python eval=False}
df.dtypes
```
::: {.callout-note collapse="true"}
## Expand see output
```
ID                       int64
Year_Birth               int64
Education               object
Marital_Status          object
Income                 float64
Kidhome                  int64
Teenhome                 int64
MntWines                 int64
MntFruits                int64
MntMeatProducts          int64
MntFishProducts          int64
MntSweetProducts         int64
MntGoldProds             int64
NumWebPurchases          int64
NumCatalogPurchases      int64
NumStorePurchases        int64
NumWebVisitsMonth        int64
Complain                 int64
Z_CostContact            int64
Z_Revenue                int64
dtype: object
```
:::
### Inspecting the DataFrame

To quikly check how many rows and columns the `DataFrame` has, you can access the `shape` attribute.

```{.python eval=False}
df.shape
```
::: {.callout-note collapse="true"}
## Expand see output
```
(1754, 20)
```
This shows that the `DataFrame` has **1754** rows and **20** columns.
:::

It is often useful to have a quick look at the first rows, to get, for example, an idea of the data was read correctly. 
This can be done with the `head()` function.

```{.python eval=False}
df.head()
```
::: {.callout-note collapse="true"}
## Expand see output

ID|Year_Birth|Education|Marital_Status|Income|Kidhome|Teenhome|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|Complain|Z_CostContact|Z_Revenue
-|----|----|----------|------|-------|-|-|---|--|---|---|--|--|-|--|-|-|-|-|--
0|5524|1957|Graduation|Single|58138.0|0|0|635|88|546|172|88|88|8|10|4|7|0|3|11
1|2174|1954|Graduation|Single|46344.0|1|1|11|1|6|2|1|6|1|1|2|5|0|3|11
2|4141|1965|Graduation|Together|71613.0|0|0|426|49|127|111|21|42|8|2|10|4|0|3|11
3|6182|1984|Graduation|Together|26646.0|1|0|11|4|20|10|3|5|2|0|4|6|0|3|11
4|7446|1967|Master|Together|62513.0|0|1|520|42|98|0|42|14|6|4|10|6|0|3|11
:::

:::{.callout-tip collapse="true"}
## **Fuctions and attributes**
The difference between calling a function and an atribute is the `()`. 
`.head()` is a function and will perform an action. 
While `.shape` is an attribute and will return a value that is already stored in the `DataFrame`
:::

What we can see it that, unlike **R**, **Python** and in extension **Pandas** is 0-indexed instead of 1-indexed.

### Accessing rows and columns

We can access parts of the data in `DataFrames` in different ways.

The first method is sub-setting the rows using the index.

This will take only the second row and all columns, producing a `Series`:

```{.python eval=False}
df.head()
df.loc[1, :]
```
::: {.callout-note collapse="true"}
## Expand see output
ID                           2174
Year_Birth                   1954
Education              Graduation
Marital_Status             Single
Income                    46344.0
Kidhome                         1
Teenhome                        1
MntWines                       11
MntFruits                       1
MntMeatProducts                 6
MntFishProducts                 2
MntSweetProducts                1
MntGoldProds                    6
NumWebPurchases                 1
NumCatalogPurchases             1
NumStorePurchases               2
NumWebVisitsMonth               5
Complain                        0
Z_CostContact                   3
Z_Revenue                      11
Name: 1, dtype: object
:::

And this will take the second and third row, producing another `DataFrame`:

```{.python eval=False}
df.head()
df.loc[1:2, :]
```
::: {.callout-note collapse="true"}
## Expand see output
ID|Year_Birth|Education|Marital_Status|Income|Kidhome|Teenhome|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|Complain|Z_CostContact|Z_Revenue
-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-
1|2174|1954|Graduation|Single|46344.0|1|1|11|1|6|2|1|6|1|1|2|5|0|3|11
2|4141|1965|Graduation|Together|71613.0|0|0|426|49|127|111|21|42|8|2|10|4|0|3|11
:::

It is important to understand that almost all operations on `DataFrames` are not in place, meaning that the dataframe is not modified.
To keep the changes, the dataframe has to be actively stored using the same name or a new variable.

This, for example, will create a new `DataFrame` of only the "Education" and "Marital_Status" columns.

```{.python eval=False}
df.head()
new_df = df.loc[:, ["Education", "Marital_Status"]]
new_df
```
::: {.callout-note collapse="true"}
## Expand see output
|Education|Marital_Status
-|-|-
0|Graduation|Single
1|Graduation|Single
2|Graduation|Together
3|Graduation|Together
4|Master|Together
â€¦|â€¦|â€¦
1749|Graduation|Together
1750|Graduation|Married
1751|Graduation|Married
1752|Graduation|Divorced
1753|Master|Together
1754 rows Ã— 2 columns
:::

Selecting only one column by name.

```{.python eval=False}
df["Year_Birth"]
```
::: {.callout-note collapse="true"}
## Expand see output
```
0       1957
1       1954
2       1965
3       1984
4       1967
        ... 
1749    1977
1750    1974
1751    1967
1752    1981
1753    1956
```
:::
We can also remove columns from the `DataFrame`.

In this case, we want to remove the columns `Z_CostContact` and `Z_Revenue` and keep those changes.

```{.python eval=False}
df = df.drop("Z_CostContact", axis=1)
df = df.drop("Z_Revenue", axis=1)
```

### Conditional subsetting

To look more specifically at a subset of the data we can set certain conditions.

This subsetting syntax is at first glance complicated but hopefully makes sense when going through it step by step.

If interested only in the individuals in the table that graduated, we can test each string in the column `Education` if it is equal to `Graduation` which will return `series` with Booleans values `True` or `false`:

```{.python eval=False}
education_is_grad = (df["Education"] == "Graduation")
education_is_grad
```
```
0        True
1        True
2        True
3        True
4       False
        ...  
1749     True
1750     True
1751     True
1752     True
1753    False
Name: Education, Length: 1754, dtype: bool
```

Can you imagine an easy way to count the number of True's in this series?
::: {.callout-tip collapse="true" title="Answer"}
False is assigned a count value of 0, and True 1.
The python fuction sum() can sum up integers.
:::
::: {.callout-note collapse="true" title="Answer"}

```{.python eval=False} 
sum(education_is_grad)
```
```
1127
```
:::

In many cases, there are multiple conditions that can be if interest.
This can be done by combining multiple statements with `&`

```{.python eval=False}
two_at_once = (df["Education"] == "Graduation") & (df["Marital_Status"] == "Single")
two_at_once
```
```
0        True
1        True
2       False
3       False
4       False
        ...  
1749    False
1750    False
1751    False
1752    False
1753    False
Length: 1754, dtype: bool
```
How many Single people are there in the table that also greduated? And how many are single?
::: {.callout-note collapse="true" title="Answer"}

```{.python eval=False} 
sum(two_at_once)
```
```
252
```
```{.python eval=False} 
sum(df["Marital_Status"] == "Single")
```
```
382
```
:::

These `Series` of Booleans can be used to subset the dataframe to rows where the condition(s) are **True**:

```{.python eval=False} 
df[two_at_once]
```

ID|Year_Birth|Education|Marital_Status|Income|Kidhome|Teenhome|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|Complain|Z_CostContact|Z_Revenue
-|----|----|----------|------|-------|-|-|---|--|---|---|--|--|-|--|-|-|-|-|--
0|5524|1957|Graduation|Single|58138.0|0|0|635|88|546|172|88|88|8|10|4|7|0|3|11
1|2174|1954|Graduation|Single|46344.0|1|1|11|1|6|2|1|6|1|1|2|5|0|3|11
18|7892|1969|Graduation|Single|18589.0|0|0|6|4|25|15|12|13|2|1|3|7|0|3|11
20|5255|1986|Graduation|Single|NaN|1|0|5|1|3|3|263|362|27|0|0|1|0|3|11
33|1371|1976|Graduation|Single|79941.0|0|0|123|164|266|227|30|174|2|4|9|1|0|3|11
â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦
1720|10968|1969|Graduation|Single|57731.0|0|1|266|21|300|65|8|44|8|8|6|6|0|3|11
1723|5959|1968|Graduation|Single|35893.0|1|1|158|0|23|0|0|18|3|1|5|8|0|3|11
1743|4201|1962|Graduation|Single|57967.0|0|1|229|7|137|4|0|91|4|2|8|5|0|3|11
1746|7004|1984|Graduation|Single|11012.0|1|0|24|3|26|7|1|23|3|1|2|9|0|3|11
1748|8080|1986|Graduation|Single|26816.0|0|0|5|1|6|3|4|3|0|0|3|4|0|3|11
252 rows Ã— 20 columns

It is not actually necessary to create a `series` every time for subsetting the table and it can be done in one go by combining the conditions within _`df[]`_.

```python
df[(df["Education"] == "Master") & (df["Marital_Status"] == "Single")]
```
|ID|Year_Birth|Education|Marital_Status|Income|Kidhome|Teenhome|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|Complain|Z_CostContact|Z_Revenue
-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-
26|10738|1951|Master|Single|49389.0|1|1|40|0|19|2|1|3|2|0|3|7|0|3|11
46|6853|1982|Master|Single|75777.0|0|0|712|26|538|69|13|80|3|6|11|1|0|3|11
76|11178|1972|Master|Single|42394.0|1|0|15|2|10|0|1|4|1|0|3|7|0|3|11
98|6205|1967|Master|Single|32557.0|1|0|34|3|29|0|4|10|2|1|3|5|0|3|11
110|821|1992|Master|Single|92859.0|0|0|962|61|921|52|61|20|5|4|12|2|0|3|11
â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦|â€¦
1690|3520|1990|Master|Single|91172.0|0|0|162|28|818|0|28|56|4|3|7|3|0|3|11
1709|4418|1983|Master|Single|89616.0|0|0|671|47|655|145|111|15|7|5|12|2|0|3|11
1714|2980|1952|Master|Single|8820.0|1|1|12|0|13|4|2|4|3|0|3|8|0|3|11
1738|7366|1982|Master|Single|75777.0|0|0|712|26|538|69|13|80|3|6|11|1|0|3|11
1747|9817|1970|Master|Single|44802.0|0|0|853|10|143|13|10|20|9|4|12|8|0|3|11
75 rows Ã— 20 columns

### Describing a DataFrame

Sometimes is is nice to get a quick overview of the data in a table, such as `means` and `counts`.
Pandas has a native function to do just that, it will output a `count`, `mean`, `standard deviation`, `minimum`, `25th percentile (Q1)`, `median (50th percentile or Q2)`, `75th percentile (Q3)`, and `maximum` for each numeric columns.

```{.python eval=False} 
df.describe()
```
|ID|Year_Birth|Income|Kidhome|Teenhome|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|Complain|Z_CostContact|Z_Revenue
-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-
count|1754.000000|1754.000000|1735.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.000000|1754.0|1754.0
mean|5584.696123|1969.571266|51166.578098|0.456100|0.480616|276.072406|28.034778|166.492018|40.517104|28.958381|47.266819|3.990878|2.576967|5.714937|5.332383|0.011403|3.0|11.0
std|3254.655979|11.876614|26200.419179|0.537854|0.536112|314.604735|41.348883|225.561694|57.412986|42.830660|53.885647|2.708278|2.848335|3.231465|2.380183|0.106202|0.0|0.0
min|0.000000|1893.000000|1730.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|0.000000|3.0|11.0
25%|2802.500000|1960.000000|33574.500000|0.000000|0.000000|19.000000|2.000000|15.000000|3.000000|2.000000|10.000000|2.000000|0.000000|3.000000|3.000000|0.000000|3.0|11.0
50%|5468.000000|1971.000000|49912.000000|0.000000|0.000000|160.500000|9.000000|66.000000|13.000000|9.000000|27.000000|3.000000|1.000000|5.000000|6.000000|0.000000|3.0|11.0
75%|8441.250000|1978.000000|68130.000000|1.000000|1.000000|454.000000|35.000000|232.000000|53.500000|35.000000|63.000000|6.000000|4.000000|8.000000|7.000000|0.000000|3.0|11.0
max|11191.000000|1996.000000|666666.000000|2.000000|2.000000|1492.000000|199.000000|1725.000000|259.000000|263.000000|362.000000|27.000000|28.000000|13.000000|20.000000|1.000000|3.0|11.0
8 rows Ã— 18 columns

You can also directly calculate the relevant statistics on columns you are interested in

```{.python eval=False} 
df["MntWines"].max()
```
```
1492
```
```{.python eval=False} 
df[["Kidhome", "Teenhome"]].mean()
```
```
Kidhome     0.456100
Teenhome    0.480616
dtype: float64
```

For non-numeric columns, you can get the represented values or their counts:

```{.python eval=False} 
df["Education"].unique()
```
```
array(['Graduation', 'Master', 'Basic', '2n Cycle'], dtype=object)
```

```{.python eval=False} 
df["Marital_Status"].value_counts()
```
```
Marital_Status
Married     672
Together    463
Single      382
Divorced    180
Widow        53
Alone         2
Absurd        2
Name: count, dtype: int64
```


::: {.callout-tip}
If you get stuck on solutions to the tasks in the Jupyter notebook, the answers should be in the corresponding 'Solutions' chapter on this page.
:::

::: {.callout-tip title="Task" appearance="simple"}

Subset the `DataFrame` in two different ways:

::: {.callout-tip}
Just like with the "PhD" string before, you can subset using integers and $<$, $>$, $<=$ and $>=$.
:::


- One where everybody is born before 1970

::: {.callout-note collapse="true" title="Answer"}

```python 
df_before = df[df["Year_Birth"] < 1970]
```
:::

- One where everybody is born in or after 1970

::: {.callout-note collapse="true" title="Answer"}

```python 
df_before = df[df["Year_Birth"] >= 1970]
```
:::

- How many people are in the two `DataFrames`? 

::: {.callout-note collapse="true" title="Answer"}

```python 
print("n(before)   =", df_before.shape[0])
print("n(after)   =", df_before.shape[0])
```
```
n(before)   = 804
n(after)   = 950
```

:::

- Do the total number of people sum up to the original `DataFrame` total?

::: {.callout-note collapse="true" title="Answer"}

```python
 df_before.shape[0] + df_after.shape[0] == df.shape[0]
```
True

```python 
print("n(sum)      =", df_before.shape[0] + df_after.shape[0])
print("n(expected) =", df.shape[0])
```
```
n(sum)      = 1754
n(expected) = 1754
```

:::

- How does the mean income of the two groups differ?

::: {.callout-note collapse="true" title="Answer"}

  ```python 
  print("income(before) =", df_before["Income"].mean())
  print("income(after)  =", df_after["Income"].mean())
  ```
 income(before) = 55513.38113207547
  income(after)  = 47490.29255319149  

:::

:::

::: {.callout-tip title="Extra Task" appearance="simple"}
Can you find something else that differs a lot between the two groups?
:::

## Dealing with missing data

We can check for missing data for each cell like this:

```python
df.isna()
```
<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>ID</th>\n      <th>Year_Birth</th>\n      <th>Education</th>\n      <th>Marital_Status</th>\n      <th>Income</th>\n      <th>Kidhome</th>\n      <th>Teenhome</th>\n      <th>MntWines</th>\n      <th>MntFruits</th>\n      <th>MntMeatProducts</th>\n      <th>MntFishProducts</th>\n      <th>MntSweetProducts</th>\n      <th>MntGoldProds</th>\n      <th>NumWebPurchases</th>\n      <th>NumCatalogPurchases</th>\n      <th>NumStorePurchases</th>\n      <th>NumWebVisitsMonth</th>\n      <th>Complain</th>\n      <th>Z_CostContact</th>\n      <th>Z_Revenue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1749</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1750</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1751</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1752</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1753</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>1754 rows Ã— 20 columns</p>

By summing over each row, we see how many missing values are in each column.

`True` is treated as `1` and `False` as `0`.

```python
df.isna().sum()
```
```
ID                      0
Year_Birth              0
Education               0
Marital_Status          0
Income                 19
Kidhome                 0
Teenhome                0
MntWines                0
MntFruits               0
MntMeatProducts         0
MntFishProducts         0
MntSweetProducts        0
MntGoldProds            0
NumWebPurchases         0
NumCatalogPurchases     0
NumStorePurchases       0
NumWebVisitsMonth       0
Complain                0
dtype: int64
```

We don't really know what a missing value means so we are just going to keep them in the data.

However, we could remove them using `df.dropna()`

### Grouping data

We can group a `DataFrame` using a categorical column (for example `Education` or `Marital_Status`).

This allows us to do perform operations on each group individually.

For example, we could group by `Education` and calculate the mean `Income`:

```python
df.groupby(by="Education")["Income"].mean()
```
```
Education
2n Cycle      47633.190000
Basic         20306.259259
Graduation    52720.373656
Master        52917.534247
Name: Income, dtype: float6
```

##  Combining data

### Concatenation

One way to combine multiple datasets is through **concatenation**, which either combines all columns or rows of multiple `DataFrames`.

The command to combine two `DataFrames` by appending all rows is `pd.concat([first_dataframe, second_dataframe])`

::: {.callout-tip title="Task" appearance="simple"}

- Read the **tsv** "phd_data.tsv" as a new `DataFrame` and name the variable `df2`


::: {.callout-note collapse="true" title="Answer"}
```python 
df2 = pd.read_csv("../phd_data.tsv", sep="\t")
```
:::

- Concatenate the "old" `DataFrame` `df` and the new `df2` and name the concatenated one `concat_df`

::: {.callout-note collapse="true" title="Answer"}

```python 
concat_df = pd.concat([df, df2])
concat_df
```
<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>ID</th>\n      <th>Year_Birth</th>\n      <th>Education</th>\n      <th>Marital_Status</th>\n      <th>Income</th>\n      <th>Kidhome</th>\n      <th>Teenhome</th>\n      <th>MntWines</th>\n      <th>MntFruits</th>\n      <th>MntMeatProducts</th>\n      <th>MntFishProducts</th>\n      <th>MntSweetProducts</th>\n      <th>MntGoldProds</th>\n      <th>NumWebPurchases</th>\n      <th>NumCatalogPurchases</th>\n      <th>NumStorePurchases</th>\n      <th>NumWebVisitsMonth</th>\n      <th>Complain</th>\n      <th>Z_CostContact</th>\n      <th>Z_Revenue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5524</td>\n      <td>1957</td>\n      <td>Graduation</td>\n      <td>Single</td>\n      <td>58138.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>635</td>\n      <td>88</td>\n      <td>546</td>\n      <td>172</td>\n      <td>88</td>\n      <td>88</td>\n      <td>8</td>\n      <td>10</td>\n      <td>4</td>\n      <td>7</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2174</td>\n      <td>1954</td>\n      <td>Graduation</td>\n      <td>Single</td>\n      <td>46344.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4141</td>\n      <td>1965</td>\n      <td>Graduation</td>\n      <td>Together</td>\n      <td>71613.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>426</td>\n      <td>49</td>\n      <td>127</td>\n      <td>111</td>\n      <td>21</td>\n      <td>42</td>\n      <td>8</td>\n      <td>2</td>\n      <td>10</td>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6182</td>\n      <td>1984</td>\n      <td>Graduation</td>\n      <td>Together</td>\n      <td>26646.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11</td>\n      <td>4</td>\n      <td>20</td>\n      <td>10</td>\n      <td>3</td>\n      <td>5</td>\n      <td>2</td>\n      <td>0</td>\n      <td>4</td>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7446</td>\n      <td>1967</td>\n      <td>Master</td>\n      <td>Together</td>\n      <td>62513.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>520</td>\n      <td>42</td>\n      <td>98</td>\n      <td>0</td>\n      <td>42</td>\n      <td>14</td>\n      <td>6</td>\n      <td>4</td>\n      <td>10</td>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>481</th>\n      <td>11133</td>\n      <td>1973</td>\n      <td>PhD</td>\n      <td>YOLO</td>\n      <td>48432.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>322</td>\n      <td>3</td>\n      <td>50</td>\n      <td>4</td>\n      <td>3</td>\n      <td>42</td>\n      <td>7</td>\n      <td>1</td>\n      <td>6</td>\n      <td>8</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>482</th>\n      <td>9589</td>\n      <td>1948</td>\n      <td>PhD</td>\n      <td>Widow</td>\n      <td>82032.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>332</td>\n      <td>194</td>\n      <td>377</td>\n      <td>149</td>\n      <td>125</td>\n      <td>57</td>\n      <td>4</td>\n      <td>6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>483</th>\n      <td>4286</td>\n      <td>1970</td>\n      <td>PhD</td>\n      <td>Single</td>\n      <td>57642.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>580</td>\n      <td>6</td>\n      <td>58</td>\n      <td>8</td>\n      <td>0</td>\n      <td>27</td>\n      <td>7</td>\n      <td>6</td>\n      <td>6</td>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>484</th>\n      <td>4001</td>\n      <td>1946</td>\n      <td>PhD</td>\n      <td>Together</td>\n      <td>64014.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>406</td>\n      <td>0</td>\n      <td>30</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>8</td>\n      <td>2</td>\n      <td>5</td>\n      <td>7</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>485</th>\n      <td>9405</td>\n      <td>1954</td>\n      <td>PhD</td>\n      <td>Married</td>\n      <td>52869.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>84</td>\n      <td>3</td>\n      <td>61</td>\n      <td>2</td>\n      <td>1</td>\n      <td>21</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n      <td>0</td>\n      <td>3</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n<p>2240 rows Ã— 20 columns</p>

:::

- Is there anything weird about the new `DataFrame` and can you fix that?

::: {.callout-note collapse="true" title="Answer"}

We previously removed the columns "Z_CostContact" and "Z_Revenue" but they are in the new data again.

We can remove them like before:

```python 
concat_df = concat_df.drop("Z_CostContact", axis=1)
concat_df = concat_df.drop("Z_Revenue", axis=1)
concat_df
```
<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>ID</th>\n      <th>Year_Birth</th>\n      <th>Education</th>\n      <th>Marital_Status</th>\n      <th>Income</th>\n      <th>Kidhome</th>\n      <th>Teenhome</th>\n      <th>MntWines</th>\n      <th>MntFruits</th>\n      <th>MntMeatProducts</th>\n      <th>MntFishProducts</th>\n      <th>MntSweetProducts</th>\n      <th>MntGoldProds</th>\n      <th>NumWebPurchases</th>\n      <th>NumCatalogPurchases</th>\n      <th>NumStorePurchases</th>\n      <th>NumWebVisitsMonth</th>\n      <th>Complain</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5524</td>\n      <td>1957</td>\n      <td>Graduation</td>\n      <td>Single</td>\n      <td>58138.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>635</td>\n      <td>88</td>\n      <td>546</td>\n      <td>172</td>\n      <td>88</td>\n      <td>88</td>\n      <td>8</td>\n      <td>10</td>\n      <td>4</td>\n      <td>7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2174</td>\n      <td>1954</td>\n      <td>Graduation</td>\n      <td>Single</td>\n      <td>46344.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4141</td>\n      <td>1965</td>\n      <td>Graduation</td>\n      <td>Together</td>\n      <td>71613.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>426</td>\n      <td>49</td>\n      <td>127</td>\n      <td>111</td>\n      <td>21</td>\n      <td>42</td>\n      <td>8</td>\n      <td>2</td>\n      <td>10</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6182</td>\n      <td>1984</td>\n      <td>Graduation</td>\n      <td>Together</td>\n      <td>26646.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11</td>\n      <td>4</td>\n      <td>20</td>\n      <td>10</td>\n      <td>3</td>\n      <td>5</td>\n      <td>2</td>\n      <td>0</td>\n      <td>4</td>\n      <td>6</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7446</td>\n      <td>1967</td>\n      <td>Master</td>\n      <td>Together</td>\n      <td>62513.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>520</td>\n      <td>42</td>\n      <td>98</td>\n      <td>0</td>\n      <td>42</td>\n      <td>14</td>\n      <td>6</td>\n      <td>4</td>\n      <td>10</td>\n      <td>6</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>481</th>\n      <td>11133</td>\n      <td>1973</td>\n      <td>PhD</td>\n      <td>YOLO</td>\n      <td>48432.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>322</td>\n      <td>3</td>\n      <td>50</td>\n      <td>4</td>\n      <td>3</td>\n      <td>42</td>\n      <td>7</td>\n      <td>1</td>\n      <td>6</td>\n      <td>8</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>482</th>\n      <td>9589</td>\n      <td>1948</td>\n      <td>PhD</td>\n      <td>Widow</td>\n      <td>82032.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>332</td>\n      <td>194</td>\n      <td>377</td>\n      <td>149</td>\n      <td>125</td>\n      <td>57</td>\n      <td>4</td>\n      <td>6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>483</th>\n      <td>4286</td>\n      <td>1970</td>\n      <td>PhD</td>\n      <td>Single</td>\n      <td>57642.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>580</td>\n      <td>6</td>\n      <td>58</td>\n      <td>8</td>\n      <td>0</td>\n      <td>27</td>\n      <td>7</td>\n      <td>6</td>\n      <td>6</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>484</th>\n      <td>4001</td>\n      <td>1946</td>\n      <td>PhD</td>\n      <td>Together</td>\n      <td>64014.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>406</td>\n      <td>0</td>\n      <td>30</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>8</td>\n      <td>2</td>\n      <td>5</td>\n      <td>7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>485</th>\n      <td>9405</td>\n      <td>1954</td>\n      <td>PhD</td>\n      <td>Married</td>\n      <td>52869.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>84</td>\n      <td>3</td>\n      <td>61</td>\n      <td>2</td>\n      <td>1</td>\n      <td>21</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2240 rows Ã— 18 columns</p>
:::

- Is there something interesting about the marital status of some people that have a PhD?

::: {.callout-note collapse="true" title="Answer"}

[
```python 
concat_df[concat_df["Education"]=="PhD"]["Marital_Status"].value_counts()
```
```
Marital_Status
Married     192
Together    117
Single       98
Divorced     52
Widow        24
YOLO          2
Alone         1
Name: count, dtype: int64
```

There's two people that have "YOLO" as their Marital Status ...]

:::

:::

### Merging

Analysing numbers can be easier than analysing categorial values, like "PhD" and "Master".

To make our like easier, we might want to have a new column when the Education level is replaced with a number that "ranks" the Education levels by how long it takes.

This information could be stored in a Python `Dictionary` (Also called Hash Map in other languages), which stores **key** and **value** pairs.

We could store the Education information like this:

```python
education_dictionary = {
    "Basic": 1,
    "2n Cycle": 2,
    "Graduation": 3,
    "Master": 4,
    "PhD": 5
}
```
We can now convert this `Dictionary` to a `DataFrame`:

```python
education_df = pd.DataFrame.from_dict(education_dictionary, orient="index")
education_df
```
<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Basic</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2n Cycle</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Graduation</th>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Master</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>PhD</th>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>

The resulting `DataFrame` has the Education level as index and the column 0 has the level information.

We can rename the column to "Level".

```python
education_df = education_df.rename(columns={0: "Level"})
education_df
```
<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>Level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Basic</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2n Cycle</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Graduation</th>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Master</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>PhD</th>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>

We can now **merge** this new `education_df` with our previous `concat_df`.

The left `DataFrame` is `concat_df` and we merge on "Education" because that's where the Eduction information is.

The right one is `education_df` and the information is in the index.

```python
merged_df = pd.merge(left=concat_df, right=education_df, left_on="Education", right_index=True)
merged_df
```
<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>ID</th>\n      <th>Year_Birth</th>\n      <th>Education</th>\n      <th>Marital_Status</th>\n      <th>Income</th>\n      <th>Kidhome</th>\n      <th>Teenhome</th>\n      <th>MntWines</th>\n      <th>MntFruits</th>\n      <th>MntMeatProducts</th>\n      <th>MntFishProducts</th>\n      <th>MntSweetProducts</th>\n      <th>MntGoldProds</th>\n      <th>NumWebPurchases</th>\n      <th>NumCatalogPurchases</th>\n      <th>NumStorePurchases</th>\n      <th>NumWebVisitsMonth</th>\n      <th>Complain</th>\n      <th>Level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5524</td>\n      <td>1957</td>\n      <td>Graduation</td>\n      <td>Single</td>\n      <td>58138.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>635</td>\n      <td>88</td>\n      <td>546</td>\n      <td>172</td>\n      <td>88</td>\n      <td>88</td>\n      <td>8</td>\n      <td>10</td>\n      <td>4</td>\n      <td>7</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2174</td>\n      <td>1954</td>\n      <td>Graduation</td>\n      <td>Single</td>\n      <td>46344.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4141</td>\n      <td>1965</td>\n      <td>Graduation</td>\n      <td>Together</td>\n      <td>71613.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>426</td>\n      <td>49</td>\n      <td>127</td>\n      <td>111</td>\n      <td>21</td>\n      <td>42</td>\n      <td>8</td>\n      <td>2</td>\n      <td>10</td>\n      <td>4</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6182</td>\n      <td>1984</td>\n      <td>Graduation</td>\n      <td>Together</td>\n      <td>26646.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11</td>\n      <td>4</td>\n      <td>20</td>\n      <td>10</td>\n      <td>3</td>\n      <td>5</td>\n      <td>2</td>\n      <td>0</td>\n      <td>4</td>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>965</td>\n      <td>1971</td>\n      <td>Graduation</td>\n      <td>Divorced</td>\n      <td>55635.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>235</td>\n      <td>65</td>\n      <td>164</td>\n      <td>50</td>\n      <td>49</td>\n      <td>27</td>\n      <td>7</td>\n      <td>3</td>\n      <td>7</td>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>481</th>\n      <td>11133</td>\n      <td>1973</td>\n      <td>PhD</td>\n      <td>YOLO</td>\n      <td>48432.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>322</td>\n      <td>3</td>\n      <td>50</td>\n      <td>4</td>\n      <td>3</td>\n      <td>42</td>\n      <td>7</td>\n      <td>1</td>\n      <td>6</td>\n      <td>8</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>482</th>\n      <td>9589</td>\n      <td>1948</td>\n      <td>PhD</td>\n      <td>Widow</td>\n      <td>82032.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>332</td>\n      <td>194</td>\n      <td>377</td>\n      <td>149</td>\n      <td>125</td>\n      <td>57</td>\n      <td>4</td>\n      <td>6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>483</th>\n      <td>4286</td>\n      <td>1970</td>\n      <td>PhD</td>\n      <td>Single</td>\n      <td>57642.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>580</td>\n      <td>6</td>\n      <td>58</td>\n      <td>8</td>\n      <td>0</td>\n      <td>27</td>\n      <td>7</td>\n      <td>6</td>\n      <td>6</td>\n      <td>4</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>484</th>\n      <td>4001</td>\n      <td>1946</td>\n      <td>PhD</td>\n      <td>Together</td>\n      <td>64014.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>406</td>\n      <td>0</td>\n      <td>30</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>8</td>\n      <td>2</td>\n      <td>5</td>\n      <td>7</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>485</th>\n      <td>9405</td>\n      <td>1954</td>\n      <td>PhD</td>\n      <td>Married</td>\n      <td>52869.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>84</td>\n      <td>3</td>\n      <td>61</td>\n      <td>2</td>\n      <td>1</td>\n      <td>21</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>2240 rows Ã— 19 columns</p>


## Data visualization

We can easily create simple graphs using `DataFrame.plot()`.

This uses the package **matplotlib** in the background, which is a very powerful and popular plotting library but is not the most user friendly.

Using this **Pandas** method is very easy and can be a good way to do some initial exploratory plots and later refine them using either pure **matplobib** or another library.

### Histogram

We can plot the data from a `DataFrame` like this:

`kind` specifies the kind of plot (for example *hist* for histogram, *bar* for bar graph or *scatter* for scatter plot).

We usually specify the columns from which the `x` and `y` components should be taken, but for a histogram we only need to specify one.

```python
ax = merged_df.plot(kind="hist", y="Income")
ax.set_xlabel("Income")
ax.set_title("Histogram of income")
```
Text(0.5, 1.0, 'Histogram of income')

![png](https://github.com/Kevinnota/teaching_stuff/blob/main/histogram.png?raw=true)

::: {.callout-tip title="Task" appearance="simple"}

This doesn't look very good because the x-axis extends so much!

- Looking at the data, can you figure out what might cause this?

::: {.callout-note collapse="true" title="Answer"}

When we look at the highest earners, we see that somebody put *666666* as their income.

We can assume that this was put as a joke or is an outlier.

In either way, we can redo the plot with that datapoint removed.
:::

- Can you "fix" the plot?

::: {.callout-note collapse="true" title="Answer"}

```python
ax = merged_df[merged_df["Income"] != 666666].plot(kind="hist",y="Income")
ax.set_xlabel("Income")
ax.set_title("Fixed Histogram of income")
```
Text(0.5, 1.0, 'Fixed Histogram of income')

![png](https://github.com/Kevinnota/teaching_stuff/blob/main/fixed_histogram.png?raw=true)

:::

:::

### Bar plot

Another visualization we could do is a bar plot.

Using the `groupby` and `mean` methods, we can calculate the mean Income like we've learned before.

```python
grouped_by_education = merged_df.groupby(by="Education")["Income"].mean()
grouped_by_education

```
```
Education
2n Cycle      47633.190000
Basic         20306.259259
Graduation    52720.373656
Master        52917.534247
PhD           56145.313929
Name: Income, dtype: float64
```
Now, this data can be shown:

```python
ax = grouped_by_education.plot(kind="bar")
ax.set_ylabel("Mean income")
ax.set_title("Mean income for each education level")
```
Text(0.5, 1.0, 'Mean income for each education level')

![png](https://github.com/Kevinnota/teaching_stuff/blob/main/bar_plot.png?raw=true)

### Scatter plot

Another kind of plot is the scatter plot, which needs two columns for the **x** and **y** axis.

```python
ax = df.plot(kind="scatter", x="MntWines", y="MntFruits")
ax.set_title("Wine purchases and Fruit purchases")
```
Text(0.5, 1.0, 'Wine purchases and Fruit purchases')

![png](https://github.com/Kevinnota/teaching_stuff/blob/main/scatter_polt_01.png?raw=true)

You can also specify whether the axes should be on the log scale or not.

```python
ax = df.plot(kind="scatter", x="MntWines", y="MntFruits", logy=True, logx=True)
ax.set_title("Wine purchases and Fruit purchases, on log scale")
```
Text(0.5, 1.0, 'Wine purchases and Fruit purchases, on log scale')

![png](https://github.com/Kevinnota/teaching_stuff/blob/main/scatter_polt_02.png?raw=true)


## Plotnine

Plotnine is the Python clone of ggplot2, which is very powerful and is great if you are already familiar with the ggplot2 syntax!

```python
from plotnine import *
```
```python
(ggplot(merged_df, aes("Education", "MntWines", fill="Education"))
 + geom_boxplot(alpha=0.8))
```
![png](https://github.com/Kevinnota/teaching_stuff/blob/main/boxplot.png?raw=true)


```python
(ggplot(merged_df[(merged_df["Year_Birth"]>1900) & (merged_df["Income"]!=666666)],
        aes("Year_Birth", "Income", fill="Education"))
 + geom_point(alpha=0.5, stroke=0)
 + facet_wrap("Marital_Status"))
```
![png](https://github.com/Kevinnota/teaching_stuff/blob/main/facet_scatter.png?raw=true)


**task**

Now that you are familiar with python, pandas, and plotting. There are two data.tables from **AncientMetagenomeDir** which contains metadata from metagenomes. You should, by using the code in the tutorial be able to explore the datasets and make some fancy plots.

```
file names:
sample_table_url
library_table_url
```

## (Optional) clean-up

Let's clean up your working directory by removing all the data and output from this chapter.

When closing your `jupyter` notebook(s), say no to saving any additional files.

Press <kbd>ctrl</kbd> + <kbd>c</kbd> on your terminal, and type <kbd>y</kbd> when requested. 
Once completed, the command below will remove the `/<PATH>/<TO>/python-pandas` directory **as well as all of its contents**. 

::: {.callout-tip}
## Pro Tip
Always be VERY careful when using `rm -r`. Check 3x that the path you are
specifying is exactly what you want to delete and nothing more before pressing
ENTER!
:::

```bash
rm -r /<PATH>/<TO>/python-pandas*
```

Once deleted you can move elsewhere (e.g. `cd ~`).

We can also get out of the `conda` environment with

```bash
conda deactivate
```

To delete the conda environment

```bash
conda remove --name python-pandas --all -y
```